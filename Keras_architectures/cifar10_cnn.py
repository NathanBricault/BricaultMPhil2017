'''Train a simple deep CNN on the CIFAR10 small images dataset.
GPU run command with Theano backend (with TensorFlow, the GPU is automatically used):
    THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatx=float32 python cifar10_cnn.py
It gets down to 0.65 test logloss in 25 epochs, and down to 0.55 after 50 epochs.
(it's still underfitting at that point, though).
'''

from __future__ import print_function
import keras
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from PreProcess import Dataset
from PreProcess import DownSampleParams
from keras.callbacks import ModelCheckpoint
from keras.callbacks import CSVLogger
import os

def cifar_cnn(model_name, downsample_params, data_augmentation = False): 
    batch_size = 32
    num_classes = 10
    epochs = 200
    output_prefix = prefix_handler(model_name)

    # The data, shuffled and split between train and test sets:
    (x_train, y_train), (x_test, y_test) = cifar10.load_data()
    dataset = Dataset("", xt = x_train, yt = y_train, xv = x_test, yv = y_test)

    if downsample_params.do_downsample:
        dataset = dataset.downsample(downsample_params.num_training, downsample_params.num_validation)
    data = dataset.unpack()
    ((x_train, y_train), (x_test, y_test)) = prep_data(dataset.unpack(), num_classes)

    input_shape = x_train.shape[1:]
    model = Sequential()
    architecture(model, num_classes, input_shape)
    
    # initiate RMSprop optimizer
    opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)
    
    # Let's train the model using RMSprop
    model.compile(loss='categorical_crossentropy',
                  optimizer=opt,
                  metrics=['accuracy'])
    
    # ----------------- Model Training -------------------
    if not data_augmentation:
        print('Not using data augmentation.')
        model.fit(x_train, y_train,
                  batch_size=batch_size,
                  epochs=epochs,
                  callbacks = default_callbacks(output_prefix),
                  validation_data=(x_test, y_test),
                  shuffle=True)
    else:
        augmented_fit(model, x_train, y_train, x_test, y_test, batch_size, epochs, output_prefix)
        

def architecture(model, num_classes, input_shape):
    model.add(Conv2D(32, (3, 3), padding='same',
                     input_shape=input_shape))
    model.add(Activation('relu'))
    model.add(Conv2D(32, (3, 3)))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))
    
    model.add(Conv2D(64, (3, 3), padding='same'))
    model.add(Activation('relu'))
    model.add(Conv2D(64, (3, 3)))
    model.add(Activation('relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))
    
    model.add(Flatten())
    model.add(Dense(512))
    model.add(Activation('relu'))
    model.add(Dropout(0.5))
    model.add(Dense(num_classes))
    model.add(Activation('softmax'))

def prep_data( data, num_classes ):
    (x_train, y_train), (x_test, y_test) = data
    # Convert class vectors to binary class matrices.
    y_train = keras.utils.to_categorical(y_train, num_classes)
    y_test = keras.utils.to_categorical(y_test, num_classes)
    x_train = x_train.astype('float32')
    x_test = x_test.astype('float32')
    x_train /= 255
    x_test /= 255
    print(len(y_train))
    print(len(y_test))
    return(( (x_train, y_train), (x_test, y_test)))

def augmented_fit(model, x_train, y_train, x_test, y_test, batch_size, epochs, output_prefix):
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(x_train, y_train,
                                     batch_size=batch_size),
                        steps_per_epoch=x_train.shape[0] // batch_size,
                        epochs=epochs,
                        callbacks = default_callbacks(output_prefix),
                        validation_data=(x_test, y_test))

def default_callbacks(output_prefix, dperiod = 1):
   # reduce_lr = ReduceLROnPlateau(monitor='accuracy', factor=.1,
                              #    patience=5, min_lr=0.001)
    checkpoint = ModelCheckpoint(output_prefix + "_lweights.{epoch:02d}-{val_loss:.2f}.hdf5", monitor='val_acc', verbose=0, save_best_only=False, save_weights_only=False, mode='auto', period=dperiod)
    checkpoint_best = ModelCheckpoint(output_prefix + "_BEST_lweights.{epoch:02d}-{val_loss:.2f}.hdf5", monitor='val_acc', verbose=0, save_best_only=True, save_weights_only=False, mode='auto', period=dperiod)
    csv_logger = CSVLogger(output_prefix + '_log.csv', append=True, separator=';')
    return( [checkpoint, checkpoint_best, csv_logger] )

def prefix_handler(model_name):
    target_dir_prefix = os.environ["OUTPUT_DIR"] + "CIFAR_AUGMENTED/" +  model_name + "/"
    output_prefix = target_dir_prefix + model_name
    if os.path.exists(target_dir_prefix):
        print("WARNING: target dataset already exists, this process is overwriting it!")               
    else:
        os.makedirs(target_dir_prefix)
    return(output_prefix)
